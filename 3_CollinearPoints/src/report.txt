See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     PASSED
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  41/41 tests passed
Memory:       1/1 tests passed
Timing:       41/41 tests passed

Aggregate score: 100.00%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.9K Jul 30 12:25 BruteCollinearPoints.java
3.9K Jul 30 12:25 FastCollinearPoints.java
5.1K Jul 30 12:25 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------

================================================================


% pmd *.java
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 17/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
  * filename = vertical50.txt
  * filename = vertical75.txt
  * filename = vertical100.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
  * filename = input10.txt
  * filename = input20.txt
  * filename = input50.txt
  * filename = input80.txt
  * filename = input300.txt
  * filename = inarow.txt
==> passed

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
  * filename = rs1423.txt
==> passed

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
  * 10 random points in a 10-by-10 grid
  * 50 random points in a 10-by-10 grid
  * 90 random points in a 10-by-10 grid
  * 200 random points in a 50-by-50 grid
==> passed

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
  * 5-by-5 grid
  * 10-by-10 grid
  * 20-by-20 grid
  * 5-by-4 grid
  * 6-by-4 grid
  * 10-by-4 grid
  * 15-by-4 grid
  * 25-by-4 grid
==> passed

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 21/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.01         546           0            546                  167
=> passed    32   0.00        4930           0           4930                  614
=> passed    64   0.00       41602           0          41602                 2318
=> passed   128   0.01      341250           0         341250                 8866
=> passed   256   0.04     2763266           0        2763266                34383
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00         627           0            627                  165
=> passed    32   0.00        5260           0           5260                  619
=> passed    64   0.00       43217           0          43217                 2326
=> passed   128   0.00      347955           0         347955                 8863
=> passed   256   0.03     2788513           0        2788513                34376
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.02        7808       17972          43752                 2320
=> passed   128   0.01       32000       82146         196292                 8867
=> passed   256   0.03      129536      387586         904708                34356
=> passed   512   0.18      521216     1750110        4021436               134783
=> passed  1024   0.33     2090993     7934488       17959969               532723
=> passed  2048   0.84     8376269    35643604       79663477              2116098
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (79663477 / 17959969) = 2.15
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        4032        4774          13580                12443
=> passed   128   0.00       16256       17804          51864                38573
=> passed   256   0.00       65280       68729         202738               128275
=> passed   512   0.01      261632      269411         800454               456262
=> passed  1024   0.06     1047552     1065043        3177638              1704180
=> passed  2048   0.08     4192256     4231234       12654724              6563440
=> passed  4096   0.25    16773120    16859182       50491484             25727440
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (50491484 / 12654724) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        6164       14013          34190                 5987
=> passed   128   0.00       24788       49798         124384                27333
=> passed   256   0.01       99412      184251         467914                95855
=> passed   512   0.02      398164      701232        1800628               338790
=> passed  1024   0.06     1593684     2710452        7014588              1252756
=> passed  2048   0.22     6376788    10608060       27592908              4788085
=> passed  4096   0.76    25511252    41855394      109222040             18681582
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (109222040 / 27592908) = 1.98
=> passed

==> 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        6188       16806          39800                 5009
=> passed   128   0.00       24912       65591         156094                21568
=> passed   256   0.01       99928      243045         586018                93593
=> passed   512   0.02      400264      928660        2257584               348725
=> passed  1024   0.07     1602100     3603038        8808176              1308623
=> passed  2048   0.30     6410484    14135281       34681046              5035772
=> passed  4096   1.07    25646060    55876025      137398110             19710815
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (137398110 / 34681046) = 1.99
=> passed

==> 8/8 tests passed

Total: 31/31 tests passed!


================================================================




30 июля 2017 в 2:07 дня
80/100
Да
Collinear Points
80/100
Скрыть результаты анализатора
See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     PASSED
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  27/41 tests passed
Memory:       1/1 tests passed
Timing:       41/41 tests passed

Aggregate score: 79.51%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.9K Jul 30 08:08 BruteCollinearPoints.java
4.1K Jul 30 08:08 FastCollinearPoints.java
5.2K Jul 30 08:08 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------

================================================================


% pmd *.java
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
     -  wrong order: slope-ascending, but breaking ties by natural order
     -  slope order depends only on the slope, not on the x- or y-coordinates
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
     -  wrong order: slope-ascending, but breaking ties by natural order
     -  slope order depends only on the slope, not on the x- or y-coordinates
  * throw java.lang.NullPointerException if either argument is null
==> FAILED


Total: 2/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 17/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10000, 0) -> (7000, 3000)
    - reference segment 0: (10000, 0) -> (7000, 3000) -> (3000, 7000) -> (0, 10000)

    - number of entries in student   solution: 2
    - number of entries in reference solution: 2
    - 2 extra entries in student solution, including: '(3000, 4000) -> (14000, 15000)'
    - 2 missing entries in student solution, including: '(3000, 4000) -> (6000, 7000) -> (14000, 15000) -> (20000, 21000)'


  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (10000, 0) -> (13000, 0)
    - reference segment 3: (10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 4
    - 3 extra entries in student solution, including: '(30000, 0) -> (20000, 10000)'
    - 3 missing entries in student solution, including: '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 17000) -> (13000, 17000)
    - reference segment 0: (1000, 17000) -> (13000, 17000) -> (17000, 17000) -> (29000, 17000)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 4
    - 4 extra entries in student solution, including: '(2000, 29000) -> (22000, 29000)'
    - 4 missing entries in student solution, including: '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9000, 1000) -> (12000, 10000)
    - reference segment 3: (9000, 1000) -> (12000, 10000) -> (15000, 19000) -> (16000, 22000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 4 extra entries in student solution, including: '(1000, 26000) -> (9000, 26000)'
    - 4 missing entries in student solution, including: '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


  * filename = input299.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (23000, 8500) -> (29550, 8500)
    - reference segment 1: (23000, 8500) -> (29550, 8500) -> (30000, 8500) -> (30950, 8500)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 3 extra entries in student solution, including: '(3250, 17450) -> (8500, 17450)'
    - 3 missing entries in student solution, including: '(3250, 17450) -> (8500, 17450) -> (13400, 17450) -> (17250, 17450)'


==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4750, 4652) -> (5766, 4652)
    - reference segment 0: (4750, 4652) -> (5766, 4652) -> (9972, 4652) -> (16307, 4652)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 4 extra entries in student solution, including: '(2682, 14118) -> (5067, 14118)'
    - 4 missing entries in student solution, including: '(2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)'


  * filename = horizontal25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10021, 1256) -> (16419, 1256)
    - reference segment 0: (10021, 1256) -> (13505, 1256) -> (16419, 1256) -> (19615, 1256)

    - number of entries in student   solution: 25
    - number of entries in reference solution: 25
    - 20 extra entries in student solution, including: '(8784, 20913) -> (9880, 20913)'
    - 20 missing entries in student solution, including: '(8784, 20913) -> (9880, 20913) -> (16352, 20913) -> (19666, 20913)'


  * filename = horizontal50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (9937, 1159) -> (15978, 1159)
    - reference segment 1: (9937, 1159) -> (11033, 1159) -> (15978, 1159) -> (17792, 1159)

    - number of entries in student   solution: 50
    - number of entries in reference solution: 50
    - 35 extra entries in student solution, including: '(3064, 20684) -> (15008, 20684)'
    - 35 missing entries in student solution, including: '(3064, 20684) -> (3854, 20684) -> (15008, 20684) -> (16150, 20684)'


  * filename = horizontal75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7903, 1061) -> (17515, 1061)
    - reference segment 0: (7903, 1061) -> (8084, 1061) -> (17515, 1061) -> (20959, 1061)

    - number of entries in student   solution: 75
    - number of entries in reference solution: 75
    - 50 extra entries in student solution, including: '(1536, 20976) -> (6545, 20976)'
    - 50 missing entries in student solution, including: '(1536, 20976) -> (6545, 20976) -> (14178, 20976) -> (14591, 20976)'


  * filename = horizontal100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1090, 1279) -> (8690, 1279)
    - reference segment 0: (1090, 1279) -> (7354, 1279) -> (8690, 1279) -> (13975, 1279)

    - number of entries in student   solution: 100
    - number of entries in reference solution: 100
    - 76 extra entries in student solution, including: '(5835, 20698) -> (7673, 20698)'
    - 76 missing entries in student solution, including: '(5835, 20698) -> (7673, 20698) -> (16154, 20698) -> (19642, 20698)'


==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4613, 9563) -> (18403, 9563)
    - reference segment 0: (4613, 9563) -> (11490, 9563) -> (18403, 9563) -> (20782, 9563)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(4613, 9563) -> (18403, 9563)'
    - 1 missing entry in student solution: '(4613, 9563) -> (11490, 9563) -> (18403, 9563) -> (20782, 9563)'


    - failed on trial 1 of 500
     4
     20782  9563
     11490  9563
     18403  9563
      4613  9563

  *  5 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1207, 10777) -> (6513, 10777)
    - reference segment 1: (1207, 10777) -> (6513, 10777) -> (7475, 10777) -> (7531, 10777)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 3 extra entries in student solution, including: '(3414, 18724) -> (5318, 18724)'
    - 3 missing entries in student solution, including: '(3414, 18724) -> (5318, 18724) -> (9197, 18724) -> (13081, 18724)'


    - failed on trial 1 of 250
     20
      2531  5107
      1207 10777
      7475 10777
      7531 10777
     19899 15071
     13081 18724
      4612 15071
      6816  5107
     11855 15071
      2718 20028
      6513 10777
     20241 15071
      5318 18724
     14452 20028
      9197 18724
      1347  5107
      3792 20028
     19421  5107
      6208 20028
      3414 18724

  * 10 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2123, 1320) -> (2468, 1320)
    - reference segment 0: (2123, 1320) -> (2468, 1320) -> (11443, 1320) -> (14996, 1320)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 10
    - 5 extra entries in student solution, including: '(3225, 17459) -> (3301, 17459)'
    - 5 missing entries in student solution, including: '(3225, 17459) -> (3301, 17459) -> (11837, 17459) -> (16957, 17459)'


    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2009, 1418) -> (12436, 1418)
    - reference segment 0: (2009, 1418) -> (6277, 1418) -> (12436, 1418) -> (13896, 1418)

    - number of entries in student   solution: 15
    - number of entries in reference solution: 15
    - 12 extra entries in student solution, including: '(10015, 19460) -> (11390, 19460)'
    - 12 missing entries in student solution, including: '(10015, 19460) -> (11390, 19460) -> (17754, 19460) -> (18058, 19460)'


    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (5757, 3426) -> (5757, 13581)
    - reference segment 1: (5757, 3426) -> (5757, 13581) -> (5757, 16647) -> (5757, 20856)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 3 extra entries in student solution, including: '(14407, 10367) -> (14407, 17188)'
    - 3 missing entries in student solution, including: '(14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)'


  * filename = vertical25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (15885, 1497) -> (15885, 10259)
    - reference segment 18: (15885, 1497) -> (15885, 10259) -> (15885, 12197) -> (15885, 16389)

    - number of entries in student   solution: 25
    - number of entries in reference solution: 25
    - 13 extra entries in student solution, including: '(13536, 9107) -> (13536, 9393)'
    - 13 missing entries in student solution, including: '(13536, 9107) -> (13536, 9393) -> (13536, 13165) -> (13536, 20946)'


  * filename = vertical50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10209, 1143) -> (10209, 8678)
    - reference segment 25: (10209, 1143) -> (10209, 8678) -> (10209, 12125) -> (10209, 12199)

    - number of entries in student   solution: 50
    - number of entries in reference solution: 50
    - 24 extra entries in student solution, including: '(5991, 15606) -> (5991, 20227)'
    - 24 missing entries in student solution, including: '(5991, 15606) -> (5991, 20227) -> (5991, 20340) -> (5991, 20424)'


  * filename = vertical75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (3285, 1020) -> (3285, 4074)
    - reference segment 5: (3285, 1020) -> (3285, 4074) -> (3285, 4567) -> (3285, 11149)

    - number of entries in student   solution: 75
    - number of entries in reference solution: 75
    - 41 extra entries in student solution, including: '(13780, 16365) -> (13780, 17494)'
    - 41 missing entries in student solution, including: '(13780, 16365) -> (13780, 17494) -> (13780, 18253) -> (13780, 18908)'


  * filename = vertical100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13469, 1049) -> (13469, 4082)
    - reference segment 60: (13469, 1049) -> (13469, 4082) -> (13469, 10837) -> (13469, 20173)

    - number of entries in student   solution: 100
    - number of entries in reference solution: 100
    - 50 extra entries in student solution, including: '(15135, 15588) -> (15135, 17398)'
    - 50 missing entries in student solution, including: '(15135, 15588) -> (15135, 17398) -> (15135, 19476) -> (15135, 20439)'


==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4543, 5710) -> (4543, 15589)
    - reference segment 0: (4543, 5710) -> (4543, 9741) -> (4543, 15589) -> (4543, 20727)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(4543, 5710) -> (4543, 15589)'
    - 1 missing entry in student solution: '(4543, 5710) -> (4543, 9741) -> (4543, 15589) -> (4543, 20727)'


    - failed on trial 1 of 500
     4
      4543  9741
      4543 20727
      4543  5710
      4543 15589

  *  5 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9074, 1242) -> (9074, 2615)
    - reference segment 2: (9074, 1242) -> (9074, 2615) -> (9074, 2959) -> (9074, 6887)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 2 extra entries in student solution, including: '(3447, 2986) -> (3447, 7370)'
    - 2 missing entries in student solution, including: '(3447, 2986) -> (3447, 7370) -> (3447, 18334) -> (3447, 20601)'


    - failed on trial 1 of 250
     20
      9074  6887
     13551 10405
      8917  6329
     13551 17606
      8917  3963
      8917 12679
     13551  9373
      3447  7370
      8917  3849
      3447 18334
      9074  1242
     11319 13009
     11319 17317
     11319  5176
      3447  2986
      9074  2959
     11319 17739
      3447 20601
     13551 13095
      9074  2615

  * 10 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (18260, 1055) -> (18260, 4407)
    - reference segment 8: (18260, 1055) -> (18260, 4407) -> (18260, 5727) -> (18260, 6561)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 10
    - 7 extra entries in student solution, including: '(2148, 12349) -> (2148, 17465)'
    - 7 missing entries in student solution, including: '(2148, 12349) -> (2148, 17465) -> (2148, 17515) -> (2148, 19569)'


    - failed on trial 1 of 50

  * 15 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 4: (20620, 3076) -> (20620, 7337)
    - reference segment 13: (20620, 3076) -> (20620, 7337) -> (20620, 12031) -> (20620, 17084)

    - number of entries in student   solution: 15
    - number of entries in reference solution: 15
    - 5 extra entries in student solution, including: '(4150, 11905) -> (4150, 12837)'
    - 5 missing entries in student solution, including: '(4150, 11905) -> (4150, 12837) -> (4150, 12876) -> (4150, 20120)'


    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 1000) -> (2000, 2000)
    - reference segment 0: (1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(1000, 1000) -> (2000, 2000)'
    - 1 missing entry in student solution: '(1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)'


  * filename = input10.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1000, 18000) -> (2000, 22000)
    - reference segment 1: (1000, 18000) -> (2000, 22000) -> (3000, 26000) -> (3500, 28000) -> (4000, 30000)

    - number of entries in student   solution: 2
    - number of entries in reference solution: 2
    - 1 extra entry in student solution: '(1000, 18000) -> (2000, 22000)'
    - 1 missing entry in student solution: '(1000, 18000) -> (2000, 22000) -> (3000, 26000) -> (3500, 28000) -> (4000, 30000)'


  * filename = input20.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (4096, 25088) -> (5120, 25088)
    - reference segment 1: (4096, 25088) -> (5120, 25088) -> (7168, 25088) -> (8192, 25088)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 1 extra entry in student solution: '(4096, 25088) -> (5120, 25088)'
    - 1 missing entry in student solution: '(4096, 25088) -> (5120, 25088) -> (7168, 25088) -> (8192, 25088)'


  * filename = input50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9000, 1000) -> (12000, 10000)
    - reference segment 4: (9000, 1000) -> (12000, 10000) -> (15000, 19000) -> (16000, 22000)

    - number of entries in student   solution: 7
    - number of entries in reference solution: 7
    - 4 extra entries in student solution, including: '(1000, 26000) -> (9000, 26000)'
    - 4 missing entries in student solution, including: '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


  * filename = input80.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (8000, 0) -> (12000, 8000)
    - reference segment 19: (8000, 0) -> (12000, 8000) -> (14000, 12000) -> (22000, 28000)

    - number of entries in student   solution: 31
    - number of entries in reference solution: 31
    - 21 extra entries in student solution, including: '(13000, 29000) -> (25000, 29000)'
    - 21 missing entries in student solution, including: '(13000, 29000) -> (19000, 29000) -> (25000, 29000) -> (28000, 29000)'


  * filename = input300.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (23000, 8500) -> (29550, 8500)
    - reference segment 1: (23000, 8500) -> (29550, 8500) -> (30000, 8500) -> (30950, 8500)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 3 extra entries in student solution, including: '(3250, 17450) -> (8500, 17450)'
    - 3 missing entries in student solution, including: '(3250, 17450) -> (8500, 17450) -> (13400, 17450) -> (17250, 17450)'


  * filename = inarow.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (0, 0) -> (0, 5000)
    - reference segment 4: (0, 0) -> (0, 5000) -> (0, 10000) -> (0, 11000) -> (0, 15000) -> (0, 20000) -> (0, 25000) -> (0, 30000)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 2 extra entries in student solution, including: '(30000, 0) -> (26000, 10000)'
    - 2 missing entries in student solution, including: '(30000, 0) -> (27000, 7500) -> (26000, 10000) -> (20000, 25000) -> (19000, 27500) -> (18000, 30000)'


==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (16454, 121) -> (16613, 1177)
    - reference segment 253: (16454, 121) -> (16507, 473) -> (16560, 825) -> (16613, 1177) -> (16666, 1529)

    - number of entries in student   solution: 288
    - number of entries in reference solution: 288
    - 154 extra entries in student solution, including: '(12652, 30395) -> (13180, 30413)'
    - 154 missing entries in student solution, including: '(12652, 30395) -> (13180, 30413) -> (13708, 30431) -> (14236, 30449) -> (14764, 30467)'


  * filename = rs1423.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (24690, 216) -> (24489, 1325)
    - reference segment 25: (24690, 216) -> (24489, 1325) -> (24288, 2434) -> (24087, 3543)

    - number of entries in student   solution: 443
    - number of entries in reference solution: 443
    - 204 extra entries in student solution, including: '(12273, 27915) -> (12663, 27972)'
    - 204 missing entries in student solution, including: '(12273, 27915) -> (12663, 27972) -> (13053, 28029) -> (13443, 28086)'


==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (10000, 0) -> (13000, 0)
    - reference segment 3: (10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 4
    - 3 extra entries in student solution, including: '(30000, 0) -> (20000, 10000)'
    - 3 missing entries in student solution, including: '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 17000) -> (13000, 17000)
    - reference segment 0: (1000, 17000) -> (13000, 17000) -> (17000, 17000) -> (29000, 17000)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 4
    - 4 extra entries in student solution, including: '(2000, 29000) -> (22000, 29000)'
    - 4 missing entries in student solution, including: '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9000, 1000) -> (12000, 10000)
    - reference segment 3: (9000, 1000) -> (12000, 10000) -> (15000, 19000) -> (16000, 22000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 4 extra entries in student solution, including: '(1000, 26000) -> (9000, 26000)'
    - 4 missing entries in student solution, including: '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


  * filename = input299.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (23000, 8500) -> (29550, 8500)
    - reference segment 1: (23000, 8500) -> (29550, 8500) -> (30000, 8500) -> (30950, 8500)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 3 extra entries in student solution, including: '(3250, 17450) -> (8500, 17450)'
    - 3 missing entries in student solution, including: '(3250, 17450) -> (8500, 17450) -> (13400, 17450) -> (17250, 17450)'


==> FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (10000, 0) -> (13000, 0)
    - reference segment 3: (10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 4
    - 3 extra entries in student solution, including: '(30000, 0) -> (20000, 10000)'
    - 3 missing entries in student solution, including: '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 17000) -> (13000, 17000)
    - reference segment 0: (1000, 17000) -> (13000, 17000) -> (17000, 17000) -> (29000, 17000)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 4
    - 4 extra entries in student solution, including: '(2000, 29000) -> (22000, 29000)'
    - 4 missing entries in student solution, including: '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9000, 1000) -> (12000, 10000)
    - reference segment 3: (9000, 1000) -> (12000, 10000) -> (15000, 19000) -> (16000, 22000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 4 extra entries in student solution, including: '(1000, 26000) -> (9000, 26000)'
    - 4 missing entries in student solution, including: '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'



It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4376, 2403) -> (12026, 14847)
    - reference segment 0: (4376, 2403) -> (11576, 14115) -> (12026, 14847) -> (12476, 15579)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(4376, 2403) -> (12026, 14847)'
    - 1 missing entry in student solution: '(4376, 2403) -> (11576, 14115) -> (12026, 14847) -> (12476, 15579)'


    - failed on trial 2 of 500
     4
     11576 14115
     12476 15579
      4376  2403
     12026 14847

  *  5 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5324, 47) -> (12634, 7477)
    - reference segment 1: (5324, 47) -> (11903, 6734) -> (12634, 7477) -> (19944, 14907)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 4 extra entries in student solution, including: '(8439, 5251) -> (8749, 6263)'
    - 4 missing entries in student solution, including: '(8439, 5251) -> (8749, 6263) -> (10454, 11829) -> (11074, 13853)'


    - failed on trial 1 of 500
     20
     14706 12065
     12478  4306
     19944 14907
      7444  5728
       724  3096
      8749  6263
      8439  5251
     14164  8360
      9124  6386
     10454 11829
     11074 13853
     11903  6734
     14542  6854
     12278  8957
     17122 10039
     12634  7477
      5324    47
     11962  3669
      5601   410
     17741 15950

  * 25 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (154, 129) -> (815, 853)
    - reference segment 13: (154, 129) -> (815, 853) -> (3459, 3749) -> (11391, 12437)

    - number of entries in student   solution: 25
    - number of entries in reference solution: 25
    - 10 extra entries in student solution, including: '(6861, 13263) -> (12881, 14215)'
    - 10 missing entries in student solution, including: '(6861, 13263) -> (12881, 14215) -> (13741, 14351) -> (14601, 14487)'


    - failed on trial 1 of 100

  * 50 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1132, 50) -> (6760, 2976)
    - reference segment 9: (1132, 50) -> (6760, 2976) -> (8368, 3812) -> (13192, 6320)

    - number of entries in student   solution: 50
    - number of entries in reference solution: 50
    - 22 extra entries in student solution, including: '(0, 14013) -> (2322, 14157)'
    - 22 missing entries in student solution, including: '(0, 14013) -> (2322, 14157) -> (3096, 14205) -> (14706, 14925)'


    - failed on trial 1 of 15

  * 100 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6271, 39) -> (7711, 13089)
    - reference segment 96: (6271, 39) -> (7711, 13089) -> (7807, 13959) -> (7903, 14829)

    - number of entries in student   solution: 100
    - number of entries in reference solution: 100
    - 55 extra entries in student solution, including: '(2682, 13116) -> (10626, 15540)'
    - 55 missing entries in student solution, including: '(2682, 13116) -> (4668, 13722) -> (10626, 15540) -> (14598, 16752)'


    - failed on trial 1 of 2

==> FAILED

Test 10: random line segments
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11434, 3042) -> (12331, 3801)
    - reference segment 0: (11434, 3042) -> (11785, 3339) -> (12331, 3801) -> (12994, 4362)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(11434, 3042) -> (12331, 3801)'
    - 1 missing entry in student solution: '(11434, 3042) -> (11785, 3339) -> (12331, 3801) -> (12994, 4362)'


    - failed on trial 1 of 500
     4
     11434  3042
     11785  3339
     12994  4362
     12331  3801

  *  5 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (13102, 10370) -> (13492, 11098)
    - reference segment 4: (13102, 10370) -> (13492, 11098) -> (13957, 11966) -> (14152, 12330)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 3 extra entries in student solution, including: '(3717, 13857) -> (5826, 14005)'
    - 3 missing entries in student solution, including: '(3717, 13857) -> (5826, 14005) -> (6225, 14033) -> (6282, 14037)'


    - failed on trial 1 of 500
     20
     12909 12712
     12461 12068
     13642  6971
     12586  5531
     12908  7589
     13102 10370
     14152 12330
     13492 11098
      6225 14033
     11709 10987
      3717 13857
     11958  6050
     11608  5483
      5826 14005
     11658  5564
      6282 14037
     13957 11966
     13005 12850
     12168  4961
     13664  7001

  * 25 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4916, 744) -> (10610, 6282)
    - reference segment 19: (4916, 744) -> (10245, 5927) -> (10610, 6282) -> (11632, 7276)

    - number of entries in student   solution: 25
    - number of entries in reference solution: 25
    - 19 extra entries in student solution, including: '(3741, 14196) -> (4826, 14196)'
    - 19 missing entries in student solution, including: '(3741, 14196) -> (4826, 14196) -> (4966, 14196) -> (6156, 14196)'


    - failed on trial 1 of 100

  * 50 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (6804, 1193) -> (7564, 2846)
    - reference segment 40: (6804, 1193) -> (6924, 1454) -> (7564, 2846) -> (9324, 6674)

    - number of entries in student   solution: 50
    - number of entries in reference solution: 50
    - 28 extra entries in student solution, including: '(1040, 13350) -> (1096, 13363)'
    - 28 missing entries in student solution, including: '(1040, 13350) -> (1096, 13363) -> (4568, 14169) -> (5240, 14325)'


    - failed on trial 1 of 15

  * 100 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4675, 178) -> (6597, 2441)
    - reference segment 58: (4675, 178) -> (6597, 2441) -> (6721, 2587) -> (8953, 5215)

    - number of entries in student   solution: 100
    - number of entries in reference solution: 100
    - 57 extra entries in student solution, including: '(3209, 13081) -> (4041, 13107)'
    - 57 missing entries in student solution, including: '(3209, 13081) -> (4041, 13107) -> (5065, 13139) -> (5449, 13151)'


    - failed on trial 1 of 2

==> FAILED

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6, 3) -> (6, 6)
    - reference segment 0: (6, 3) -> (6, 5) -> (6, 6) -> (6, 7)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(6, 3) -> (6, 6)'
    - 1 missing entry in student solution: '(6, 3) -> (6, 5) -> (6, 6) -> (6, 7)'


    - failed on trial 117 of 500
     5
         6     3
         6     7
         7     3
         6     5
         6     6

  * 10 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5, 0) -> (5, 4)
    - reference segment 0: (5, 0) -> (5, 1) -> (5, 4) -> (5, 5)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(5, 0) -> (5, 4)'
    - 1 missing entry in student solution: '(5, 0) -> (5, 1) -> (5, 4) -> (5, 5)'


    - failed on trial 9 of 500
     10
         5     5
         2     8
         0     3
         0     5
         5     1
         5     4
         8     2
         5     0
         9     9
         9     5

  * 50 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 0) -> (3, 0)
    - reference segment 13: (0, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (6, 0) -> (9, 0)

    - number of entries in student   solution: 43
    - number of entries in reference solution: 43
    - 23 extra entries in student solution, including: '(0, 8) -> (7, 8)'
    - 23 missing entries in student solution, including: '(0, 8) -> (3, 8) -> (5, 8) -> (6, 8) -> (7, 8) -> (9, 8)'


    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 0) -> (7, 0)
    - reference segment 58: (0, 0) -> (1, 0) -> (2, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (9, 0)

    - number of entries in student   solution: 136
    - number of entries in reference solution: 136
    - 52 extra entries in student solution, including: '(9, 6) -> (8, 7)'
    - 52 missing entries in student solution, including: '(9, 6) -> (8, 7) -> (7, 8) -> (6, 9)'


    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (39, 0) -> (21, 9)
    - reference segment 56: (39, 0) -> (23, 8) -> (21, 9) -> (5, 17)

    - number of entries in student   solution: 215
    - number of entries in reference solution: 215
    - 96 extra entries in student solution, including: '(5, 48) -> (32, 48)'
    - 96 missing entries in student solution, including: '(5, 48) -> (32, 48) -> (34, 48) -> (42, 48)'


    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (0, 0) -> (1, 1)
    - reference segment 5: (0, 0) -> (1, 1) -> (2, 2) -> (3, 3)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 10
    - 2 extra entries in student solution, including: '(3, 0) -> (2, 1)'
    - 2 missing entries in student solution, including: '(3, 0) -> (2, 1) -> (1, 2) -> (0, 3)'


  * 5-by-5 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 0) -> (1, 0)
    - reference segment 3: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0)

    - number of entries in student   solution: 16
    - number of entries in reference solution: 16
    - 6 extra entries in student solution, including: '(4, 1) -> (3, 2)'
    - 6 missing entries in student solution, including: '(4, 1) -> (3, 2) -> (2, 3) -> (1, 4)'


  * 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 0) -> (1, 0)
    - reference segment 67: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0)

    - number of entries in student   solution: 154
    - number of entries in reference solution: 154
    - 56 extra entries in student solution, including: '(9, 6) -> (8, 7)'
    - 56 missing entries in student solution, including: '(9, 6) -> (8, 7) -> (7, 8) -> (6, 9)'


  * 20-by-20 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 0) -> (9, 0)
    - reference segment 1203: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0) -> (10, 0) -> (11, 0) -> (12, 0) -> (13, 0) -> (14, 0) -> (15, 0) -> (16, 0) -> (17, 0) -> (18, 0) -> (19, 0)

    - number of entries in student   solution: 2446
    - number of entries in reference solution: 2446
    - 566 extra entries in student solution, including: '(19, 16) -> (18, 17)'
    - 566 missing entries in student solution, including: '(19, 16) -> (18, 17) -> (17, 18) -> (16, 19)'


  * 5-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 0) -> (2, 0)
    - reference segment 2: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0)

    - number of entries in student   solution: 13
    - number of entries in reference solution: 13
    - 5 extra entries in student solution, including: '(4, 0) -> (3, 1)'
    - 5 missing entries in student solution, including: '(4, 0) -> (3, 1) -> (2, 2) -> (1, 3)'


  * 6-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 0) -> (1, 0)
    - reference segment 3: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0)

    - number of entries in student   solution: 16
    - number of entries in reference solution: 16
    - 4 extra entries in student solution, including: '(5, 0) -> (4, 1)'
    - 4 missing entries in student solution, including: '(5, 0) -> (4, 1) -> (3, 2) -> (2, 3)'


  * 10-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 0) -> (2, 0)
    - reference segment 12: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0)

    - number of entries in student   solution: 38
    - number of entries in reference solution: 38
    - 8 extra entries in student solution, including: '(9, 0) -> (8, 1)'
    - 8 missing entries in student solution, including: '(9, 0) -> (8, 1) -> (7, 2) -> (6, 3)'


  * 15-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 0) -> (1, 0)
    - reference segment 30: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0) -> (10, 0) -> (11, 0) -> (12, 0) -> (13, 0) -> (14, 0)

    - number of entries in student   solution: 79
    - number of entries in reference solution: 79
    - 15 extra entries in student solution, including: '(14, 0) -> (13, 1)'
    - 15 missing entries in student solution, including: '(14, 0) -> (13, 1) -> (12, 2) -> (11, 3)'


  * 25-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 0) -> (21, 0)
    - reference segment 92: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0) -> (10, 0) -> (11, 0) -> (12, 0) -> (13, 0) -> (14, 0) -> (15, 0) -> (16, 0) -> (17, 0) -> (18, 0) -> (19, 0) -> (20, 0) -> (21, 0) -> (22, 0) -> (23, 0) -> (24, 0)

    - number of entries in student   solution: 213
    - number of entries in reference solution: 213
    - 29 extra entries in student solution, including: '(24, 0) -> (23, 1)'
    - 29 missing entries in student solution, including: '(24, 0) -> (23, 1) -> (22, 2) -> (21, 3)'


==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 8/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.01         546           0            546                  166
=> passed    32   0.00        4930           0           4930                  618
=> passed    64   0.00       41602           0          41602                 2319
=> passed   128   0.01      341250           0         341250                 8879
=> passed   256   0.04     2763266           0        2763266                34374
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00         646           0            646                  166
=> passed    32   0.00        5308           0           5308                  613
=> passed    64   0.00       43225           0          43225                 2321
=> passed   128   0.00      347887           0         347887                 8872
=> passed   256   0.03     2788758           0        2788758                34374
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.02        7808       17722          43252                 2318
=> passed   128   0.01       32000       84832         201664                 8863
=> passed   256   0.04      129536      388308         906152                34383
=> passed   512   0.17      521210     1768963        4059136               134774
=> passed  1024   0.26     2091002     7886340       17863682               532746
=> passed  2048   0.84     8376281    35590321       79556923              2116108
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (79556923 / 17863682) = 2.15
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        4032        4487          13006                 2453
=> passed   128   0.00       16256       17425          51106                 9118
=> passed   256   0.00       65280       67950         201180                34877
=> passed   512   0.01      261632      268053         797738               135829
=> passed  1024   0.02     1047552     1062001        3171554               534790
=> passed  2048   0.07     4192256     4225313       12642882              2120213
=> passed  4096   0.19    16773120    16847812       50468744              8438843
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (50468744 / 12642882) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        6164       13926          34016                 3141
=> passed   128   0.00       24788       49720         124228                12044
=> passed   256   0.01       99412      186988         473388                46849
=> passed   512   0.02      398164      713074        1824312               184327
=> passed  1024   0.05     1593684     2759437        7112558               730136
=> passed  2048   0.20     6376788    10814026       28004840              2904080
=> passed  4096   0.72    25511252    42714712      110940676             11579434
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (110940676 / 28004840) = 1.99
=> passed

==> 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        6188       16819          39826                 3224
=> passed   128   0.00       24912       66182         157276                12548
=> passed   256   0.01       99928      247515         594958                49382
=> passed   512   0.02      400264      952191        2304646               195648
=> passed  1024   0.08     1602100     3701434        9004968               777900
=> passed  2048   0.27     6410484    14527104       35464692              3100354
=> passed  4096   1.04    25646060    57446134      140538328             12375110
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (140538328 / 35464692) = 1.99
=> passed

==> 8/8 tests passed

Total: 31/31 tests passed!


================================================================
